最经典常用的；
1，O(n^2) --> 冒泡、插入、选择【基于比较】
2，O(n*log2(n)) --> 快排、归并【基于比较】
3，O(n) --> 桶、计数、基数【不基于比较】

分析方面：
1，最好、最坏、平均时间复杂度
2，时间复杂度的系数、常数、低阶
3，比较次数 和 交换次数
4，算法额外的内存消耗，即：空间复杂度；O(1)称为原地排序
5，算法的稳定性，即：若待排序序列中存在值相等的原色，排序后，先后顺序不变


冒泡排序：SolutionBubble
插入排序：SolutionInsert
选择排序：SolutionSelect
希尔排序：SolutionShell

并归排序：SolutionMerge + SolutionMergeB
快速排序：SolutionQuick

桶排序：SolutionBucket
计数排序：SolutionCounting
基数排序：SolutionRadix


堆排序：// http://blog.csdn.net/kimylrong/article/details/17150475
利用堆积树（堆）这种数据结构所设计的一种排序算法，它是选择排序的一种

堆实质上是满足如下性质的完全二叉树：
树中任一非叶子结点的关键字均不大于（或不小于）其左右孩子（若存在）结点的关键字

堆排序步骤：
1，构建最大堆。
2，选择顶，并与第0位置元素交换
3，由于步骤2的的交换可能破环了最大堆的性质，第0不再是最大元素，需要调用maxHeap调整堆(沉降法)，如果需要重复步骤2

最坏情况：时间复杂度为n*log(n)

