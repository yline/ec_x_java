// 包名 - 算法
greedy -- 贪心算法
{
	CoinChange -- 钱币找零(价值高先行)
}

divide -- 分治算法
{
    OrderedNumber -- 有序对个数(并归)
}

backtracking -- 回溯算法【发现很多并没有“回滚”，而是全排列+剪枝而已】
{
	EightQueens -- 八皇后(线性遍历，回溯)
	GraphColoring -- 图的着色(线性遍历，回溯)
	Knapsack -- 0-1背包（线性遍历，回溯）
	Permutations -- 全排列（线性遍历，回溯）
	Sudoku -- 数独（线性遍历，回溯）
	TravelingSaleman -- 旅行商问题（线性遍历，全排列）
}

dynamic -- 动态规划
{
	EditDistance -- 量化两个字符的相似度，编辑距离【莱文斯距离和最长公共字符串】（状态转移方程）
	Knapsack -- 0-1背包（状态缓存，遍历递推）
	Knapsack2 -- 0-1背包问题升级（状态缓存，遍历递推）
	ShortestPath -- 最短路径（状态转移方程）
	
	// 旅行商问题，这个问题比较极端，需要进行全排列；和最短路径不一样。因此，它使用动态规划，并没有性能提升。
}